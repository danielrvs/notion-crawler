var $lkuCB$notionutils = require("notion-utils");
var $lkuCB$notionclient = require("notion-client");

function $parcel$defineInteropFlag(a) {
  Object.defineProperty(a, '__esModule', {value: true, configurable: true});
}
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}

$parcel$defineInteropFlag(module.exports);

$parcel$export(module.exports, "default", () => $5983f79ea70507f7$export$2e2bcd8739ae039);


const $5983f79ea70507f7$var$notion = new (0, $lkuCB$notionclient.NotionAPI)();
async function $5983f79ea70507f7$export$2e2bcd8739ae039(rootNotionPageId, spaceId, config = {}) {
    const pageMap = await (0, $lkuCB$notionutils.getAllPagesInSpace)(rootNotionPageId, spaceId, $5983f79ea70507f7$var$notion.getPage.bind($5983f79ea70507f7$var$notion), {
        traverseCollections: true,
        uuid: true,
        ...config
    });
    const pageBlocks = Object.keys(pageMap).reduce((map, pageId)=>{
        const notionPageId = (0, $lkuCB$notionutils.uuidToId)(pageId);
        const recordMap = pageMap[pageId];
        if (!recordMap) throw new Error(`Error loading page "${pageId}"`);
        const canonicalPageId = (rootNotionPageId || "").split("-").join("") === (pageId || "").split("-").join("") ? "/" : (0, $lkuCB$notionutils.getCanonicalPageId)(pageId, recordMap, {
            uuid: false
        });
        const block = pageMap[pageId].block[pageId];
        const blockValue = block.value;
        const title = (0, $lkuCB$notionutils.getBlockTitle)(blockValue, recordMap);
        const response = {
            ...map,
            [notionPageId]: {
                id: notionPageId,
                parentId: blockValue.parent_id.split("-").join(""),
                canonicalPageId: canonicalPageId,
                title: title,
                rawData: blockValue
            }
        };
        if (blockValue.parent_table === "collection") {
            const collection = pageMap[pageId].collection[blockValue.parent_id];
            if (collection?.value?.name) {
                const collectionName = (0, $lkuCB$notionutils.getTextContent)(collection.value.name);
                const canonicalPageId = (0, $lkuCB$notionutils.normalizeTitle)(collectionName);
                response[notionPageId].collection = {
                    name: collectionName,
                    canonicalPageId: canonicalPageId,
                    rawData: collection
                };
                response[notionPageId].canonicalPageId = `${canonicalPageId}/${response[notionPageId].canonicalPageId}`;
            }
        }
        return response;
    }, {});
    const appendParentSlug = (pageId, previous = "")=>{
        const page = pageBlocks[pageId];
        if (!page?.parentId || !pageBlocks[page.parentId]) return previous;
        return appendParentSlug(page.parentId, `${pageBlocks[page.parentId].canonicalPageId}/${previous}`);
    };
    const notionPageIdToSlugMapper = {};
    for(const key in pageBlocks){
        pageBlocks[key].slug = `${appendParentSlug(key, pageBlocks[key].canonicalPageId)}`;
        // TODO: Temp fix. Refactor this.
        if (pageBlocks[key].slug.startsWith("//")) pageBlocks[key].slug = pageBlocks[key].slug.slice(1);
        if (!pageBlocks[key].slug.startsWith("/")) pageBlocks[key].slug = `/${pageBlocks[key].slug}`;
        notionPageIdToSlugMapper[key] = pageBlocks[key].slug;
    }
    return {
        pageBlocks: pageBlocks,
        notionPageIdToSlugMapper: notionPageIdToSlugMapper,
        pageMap: pageMap
    };
}


//# sourceMappingURL=main.js.map
